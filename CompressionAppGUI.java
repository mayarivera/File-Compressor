import javax.swing.*;//sets the foundation of gui for building applications
import java.awt.*;//provides classes and methods for the window
import java.awt.event.ActionEvent;//handling eventsgenerated by the gui
import java.awt.event.ActionListener;//define the code to output based on user interaction

// Strategy interface
interface CompressionStrategy {
    void compress(String file, int fileSize);
}

// Concrete strategy classes
class ZipCompressionStrategy implements CompressionStrategy {
    @Override
    public void compress(String file, int fileSize) {
        // simulated compression logic zip
        JOptionPane.showMessageDialog(null, "Compressing file " + file + " using Zip compression.\nFile size before compression: " + fileSize + "MB\nFile size after compression: 2MB");
    }
}

class RarCompressionStrategy implements CompressionStrategy {
    @Override
    public void compress(String file, int fileSize) {
        // simulated compression logic rar
        JOptionPane.showMessageDialog(null, "Compressing file " + file + " using Rar compression.\nFile size before compression: " + fileSize + "MB\nFile size after compression: 1.5MB");
    }
}

class TarCompressionStrategy implements CompressionStrategy {
    @Override
    public void compress(String file, int fileSize) {
        // simulated compression logic tar
        JOptionPane.showMessageDialog(null, "Compressing file " + file + " using Tar compression.\nFile size before compression: " + fileSize + "MB\nFile size after compression: 3MB");
    }
}

// context class
class FileCompressor {
    private CompressionStrategy compressionStrategy;

    public void setCompressionStrategy(CompressionStrategy compressionStrategy) {
        this.compressionStrategy = compressionStrategy;
    }

    public void compressFile(String file, int fileSize) {
        if (compressionStrategy != null) {
            compressionStrategy.compress(file, fileSize);
        } else {
            JOptionPane.showMessageDialog(null, "Please set a compression strategy first.");
        }
    }
//outputs a compression recommendation based on the file size
    public String recommendCompressor(int fileSize) {
        if (fileSize <= 2) {
            return "Zip Compression";
        } else if (fileSize <= 1.5) {
            return "Rar Compression";
        } else {
            return "Tar Compression";
        }
    }
}

// gui
public class CompressionAppGUI {
    public static void main(String[] args) {
        // creates instances of the concrete strategies
        CompressionStrategy zipStrategy = new ZipCompressionStrategy();
        CompressionStrategy rarStrategy = new RarCompressionStrategy();
        CompressionStrategy tarStrategy = new TarCompressionStrategy();

        // creates a context
        FileCompressor fileCompressor = new FileCompressor();

        // creates the gui components
        JFrame frame = new JFrame("File Compression App");
        JPanel panel = new JPanel();
        JComboBox<String> strategyDropdown = new JComboBox<>(new String[]{"Zip Compression", "Rar Compression", "Tar Compression"});
        JTextField fileNameField = new JTextField(20);
        JTextField fileSizeField = new JTextField(10);
        JButton compressButton = new JButton("Compress");
        JButton checkRecommendationButton = new JButton("Check Recommendation");
        JTextArea recommendationArea = new JTextArea(5, 30);
        recommendationArea.setEditable(false);

        // add components to the panel
        panel.add(new JLabel("Select Compression Strategy:"));
        panel.add(strategyDropdown);
        panel.add(new JLabel("Enter File Name:"));
        panel.add(fileNameField);
        panel.add(new JLabel("Enter File Size (MB):"));
        panel.add(fileSizeField);
        panel.add(compressButton);
        panel.add(checkRecommendationButton);
        panel.add(new JScrollPane(recommendationArea));

        // add an action to the compress button
        compressButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String fileName = fileNameField.getText().trim();
                if (fileName.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "File name cannot be empty.");
                    return;
                }
                //another error catcher if user does not enter file size
                try {
                    int fileSize = Integer.parseInt(fileSizeField.getText());
                    String selectedStrategy = (String) strategyDropdown.getSelectedItem();
                    switch (selectedStrategy) {
                        case "Zip Compression":
                            fileCompressor.setCompressionStrategy(zipStrategy);
                            break;
                        case "Rar Compression":
                            fileCompressor.setCompressionStrategy(rarStrategy);
                            break;
                        case "Tar Compression":
                            fileCompressor.setCompressionStrategy(tarStrategy);
                            break;
                    }
                    fileCompressor.compressFile(fileNameField.getText(), fileSize);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Invalid file size. Please enter a valid number.");
                }
            }
        });

        // adds the action of checking for empty slots to the recc button
        checkRecommendationButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String fileName = fileNameField.getText().trim();
                if (fileName.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "File name cannot be empty.");
                    return;
                }
                try {
                    int fileSize = Integer.parseInt(fileSizeField.getText());
                    String recommendedCompressor = fileCompressor.recommendCompressor(fileSize);
                    recommendationArea.setText("File Size: " + fileSize + "MB\nRecommended Compressor: " + recommendedCompressor);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Invalid file size. Please enter a valid number.");
                }
            }
        });

        // sets up the frame
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        frame.getContentPane().add(BorderLayout.CENTER, panel);
        frame.setVisible(true);
    }
}